trigger:
  branches:
    include:
      - master
  paths:
    exclude: 
      - .github
      - doc
      - '*.md'

variables:
  NugetSecurityAnalysisWarningLevel: none # nuget.config requires signed packages by trusted owners
  Codeql.Enabled: true

queue:
  name: VSEngSS-MicroBuild2019-1ES
  timeoutInMinutes: 60

steps:

- task: ComponentGovernanceComponentDetection@0
  inputs:
    scanType: 'Register'
    verbosity: 'Verbose'
    alertWarningLevel: 'High'

- task: PowerShell@2
  displayName: Set VSTS variables
  inputs:
    targetType: inline
    script: |
      if ($env:SignType -eq 'Real') {
        $feedGuid = '09d8d03c-1ac8-456e-9274-4d2364527d99' ## VSIDE-RealSigned-Release
      } else {
        $feedGuid = 'da484c78-f942-44ef-b197-99e2a1bef53c' ## VSIDE-TestSigned-Release
      }

      Write-Host "##vso[task.setvariable variable=feedGuid]$feedGuid"

      $SkipPublishingNetworkArtifacts = 'true' ## Network artifacts not allowed on Scale Set Pool
      Write-Host "##vso[task.setvariable variable=SkipPublishingNetworkArtifacts]$SkipPublishingNetworkArtifacts"

      if ($env:ComputerName.StartsWith('factoryvm', [StringComparison]::OrdinalIgnoreCase)) {
        Write-Host "Running on hosted queue"
        Write-Host "##vso[task.setvariable variable=Hosted]true"
      }

- task: CmdLine@2
  inputs:
    script: |
      del /s /q "bin"
  displayName: Purge bin

- task: NuGetToolInstaller@0
  displayName: Pin nuget.exe version
  inputs:
    versionSpec: 4.6.1

- task: MicroBuildSigningPlugin@1
  inputs:
    signType: $(SignType)
    esrpSigning: true
    zipSources: false
  displayName: Install MicroBuild Signing plugin
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: AntiMalware@4
  displayName: 'Run MpCmdRun.exe'
  inputs:
    InputType: Basic
    ScanType: CustomScan
    FileDirPath: '$(Build.StagingDirectory)'
    DisableRemediation: false

- task: VSBuild@1
  inputs:
    vsVersion: 15.0
    solution: 'src\SlowCheetah.sln'
    msbuildArgs: /t:Restore
    platform: $(BuildPlatform)
    configuration: $(BuildConfiguration)
  displayName: Restore SlowCheetah solution

- task: VSBuild@1
  inputs:
    vsVersion: 15.0
    solution: 'src\SlowCheetah.sln'
    msbuildArgs: '/bl:"$(Build.ArtifactStagingDirectory)/build_logs/slowcheetah.binlog"'
    platform: $(BuildPlatform)
    configuration: $(BuildConfiguration)
  displayName: Build SlowCheetah solution

- task: MicroBuildCodesignVerify@1
  inputs:
    TargetFolder: $(Build.SourcesDirectory)\bin\$(BuildConfiguration)\packages
    WhiteListPathForCerts: $(Build.SourcesDirectory)\src\build\no_authenticode.txt
    WhiteListPathForSigs: $(Build.SourcesDirectory)\src\build\no_strongname.txt
  displayName: Verify code signing
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: VSTest@2
  inputs:
    testFiltercriteria: TestCategory!=FailsInCloudTest
    searchFolder: $(System.DefaultWorkingDirectory)\bin\
    testAssemblyVer2: |
      $(BuildConfiguration)\**\*test*.dll
      !**\obj\**
    platform: $(BuildPlatform)
    configuration: $(BuildConfiguration)
  displayName: Run Tests
  condition: and(succeeded(), ne(variables['SignType'], 'real'))

- task: MicroBuildCleanup@1
  displayName: MicroBuild Cleanup
  condition: succeededOrFailed()

- task: PoliCheck@2
  displayName: 'Run PoliCheck'
  inputs:
    targetType: F
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: ManifestGeneratorTask@0
  inputs:
    BuildDropPath: $(Build.ArtifactStagingDirectory)/build_logs
  
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/MicroBuild/ESRPClient
    ArtifactName: esrpclient_logs
    ArtifactType: Container
  displayName: 'Publish Artifact: ESRP signing logs'
  condition: eq(variables['SignType'], 'real')


- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
    ArtifactName: build_logs
    ArtifactType: Container
  displayName: 'Publish Artifact: build logs'
  condition: succeededOrFailed()

- task: PublishSecurityAnalysisLogs@3
  displayName: 'Publish Guardian Artifacts'
  inputs:
    ArtifactName: CodeAnalysisLogs
    ArtifactType: Container
    PublishProcessedResults: false
    AllTools: true

## Following steps are skipped in PR builds

- task: CopyFiles@1
  displayName: Collecting symbols artifacts
  inputs:
    SourceFolder: bin/$(BuildConfiguration)/net472
    Contents: |
      **/Microsoft.VisualStudio.SlowCheetah?(*.dll|*.pdb|*.xml)
      !**/*Test*
    TargetFolder: $(Build.ArtifactStagingDirectory)/symbols
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols
    SearchPattern: '**\*.pdb'
    SymbolServerType: TeamServices
    ArtifactServices.Symbol.AccountName: microsoft
    ArtifactServices.Symbol.PAT: $(System.AccessToken)
    ArtifactServices.Symbol.UseAAD: false
  displayName: Archive symbols to VSTS
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['SignType'], 'real'))

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/symbols'
    ArtifactName: symbols
    publishLocation: Container
  displayName: 'Publish Artifact: symbols'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@1
  displayName: Collecting packages
  inputs:
    SourceFolder: bin/$(BuildConfiguration)/packages
    Contents: |
      *.nupkg
      *.vsix
    TargetFolder: $(Build.ArtifactStagingDirectory)/packages
    flattenFolders: false
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  displayName: Publish packages
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/packages
    ArtifactName: packages
    ArtifactType: Container
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: NuGetCommand@2
  inputs:
    command: push
    searchPatternPush: 'bin/$(BuildConfiguration)/packages/*.nupkg'
    publishVstsFeed: $(feedGuid)
    allowPackageConflicts: true
  displayName: Publish Sdk NuGet packages to VSTS feeds
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
